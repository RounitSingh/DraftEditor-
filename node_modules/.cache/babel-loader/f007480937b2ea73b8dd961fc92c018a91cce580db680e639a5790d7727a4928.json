{"ast":null,"code":"var _jsxFileName = \"E:\\\\Draft.js\\\\Editor\\\\src\\\\components\\\\DraftEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Editor, EditorState, ContentState, RichUtils, Modifier, convertToRaw, convertFromRaw } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DraftEditor = () => {\n  _s();\n  // State management for the editor\n  const [editorState, setEditorState] = useState(() => {\n    const savedContent = localStorage.getItem('draftContent');\n    return savedContent ? EditorState.createWithContent(convertFromRaw(JSON.parse(savedContent))) : EditorState.createEmpty();\n  });\n  const editorRef = useRef(null);\n\n  // Focus the editor when its container is clicked\n  const focusEditor = () => {\n    editorRef.current && editorRef.current.focus();\n  };\n\n  // Save the editor content to localStorage\n  const handleSave = () => {\n    const contentState = editorState.getCurrentContent();\n    const rawContent = convertToRaw(contentState);\n    localStorage.setItem('draftContent', JSON.stringify(rawContent));\n    alert('Content saved successfully!');\n  };\n\n  // Handle inline and block style toggling based on user input\n  const handleBeforeInput = chars => {\n    const currentContent = editorState.getCurrentContent();\n    const selection = editorState.getSelection();\n    if (selection.getStartOffset() === 0) {\n      const blockKey = selection.getStartKey();\n      const blockText = currentContent.getBlockForKey(blockKey).getText();\n      if (blockText.startsWith('#') && chars === ' ') {\n        setEditorState(toggleBlockStyle(editorState, selection, 'header-one', '#'));\n        return 'handled';\n      }\n      if (blockText.startsWith('*') && chars === ' ') {\n        setEditorState(toggleInlineStyle(editorState, selection, 'BOLD', '*'));\n        return 'handled';\n      }\n      if (blockText.startsWith('**') && chars === ' ') {\n        setEditorState(toggleInlineStyle(editorState, selection, 'RED', '**'));\n        return 'handled';\n      }\n      if (blockText.startsWith('***') && chars === ' ') {\n        setEditorState(toggleInlineStyle(editorState, selection, 'UNDERLINE', '***'));\n        return 'handled';\n      }\n    }\n    return 'not-handled';\n  };\n  const toggleBlockStyle = (editorState, selection, blockType, trigger) => {\n    const contentState = editorState.getCurrentContent();\n    const newContentState = Modifier.replaceText(contentState, selection.merge({\n      focusOffset: trigger.length\n    }), '');\n    const updatedState = EditorState.push(editorState, newContentState, 'remove-range');\n    return RichUtils.toggleBlockType(updatedState, blockType);\n  };\n  const toggleInlineStyle = (editorState, selection, style, trigger) => {\n    const contentState = editorState.getCurrentContent();\n    const newContentState = Modifier.replaceText(contentState, selection.merge({\n      focusOffset: trigger.length\n    }), '');\n    const updatedState = EditorState.push(editorState, newContentState, 'remove-range');\n    return RichUtils.toggleInlineStyle(updatedState, style);\n  };\n\n  // Custom style map for inline styles\n  const customStyleMap = {\n    RED: {\n      color: 'red'\n    },\n    UNDERLINE: {\n      textDecoration: 'underline'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Title\",\n      style: styles.titleInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.editorContainer,\n      onClick: focusEditor,\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        ref: editorRef,\n        editorState: editorState,\n        onChange: setEditorState,\n        handleBeforeInput: handleBeforeInput,\n        customStyleMap: customStyleMap,\n        placeholder: \"Type here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.saveButton,\n      onClick: handleSave,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n// Styles\n_s(DraftEditor, \"s+Ju93KNBYFtk2sFQleJvulySg0=\");\n_c = DraftEditor;\nconst styles = {\n  container: {\n    padding: '20px',\n    fontFamily: 'Arial, sans-serif',\n    maxWidth: '800px',\n    margin: '0 auto'\n  },\n  titleInput: {\n    width: '100%',\n    fontSize: '1.5rem',\n    padding: '10px',\n    marginBottom: '20px',\n    border: '1px solid #ccc',\n    borderRadius: '5px'\n  },\n  editorContainer: {\n    border: '1px solid #ddd',\n    minHeight: '300px',\n    padding: '10px',\n    cursor: 'text',\n    borderRadius: '5px'\n  },\n  saveButton: {\n    marginTop: '20px',\n    padding: '10px 20px',\n    fontSize: '16px',\n    backgroundColor: '#007BFF',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  }\n};\nexport default DraftEditor;\nvar _c;\n$RefreshReg$(_c, \"DraftEditor\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Editor","EditorState","ContentState","RichUtils","Modifier","convertToRaw","convertFromRaw","jsxDEV","_jsxDEV","DraftEditor","_s","editorState","setEditorState","savedContent","localStorage","getItem","createWithContent","JSON","parse","createEmpty","editorRef","focusEditor","current","focus","handleSave","contentState","getCurrentContent","rawContent","setItem","stringify","alert","handleBeforeInput","chars","currentContent","selection","getSelection","getStartOffset","blockKey","getStartKey","blockText","getBlockForKey","getText","startsWith","toggleBlockStyle","toggleInlineStyle","blockType","trigger","newContentState","replaceText","merge","focusOffset","length","updatedState","push","toggleBlockType","style","customStyleMap","RED","color","UNDERLINE","textDecoration","styles","container","children","type","placeholder","titleInput","fileName","_jsxFileName","lineNumber","columnNumber","editorContainer","onClick","ref","onChange","saveButton","_c","padding","fontFamily","maxWidth","margin","width","fontSize","marginBottom","border","borderRadius","minHeight","cursor","marginTop","backgroundColor","$RefreshReg$"],"sources":["E:/Draft.js/Editor/src/components/DraftEditor.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  Editor,\r\n  EditorState,\r\n  ContentState,\r\n  RichUtils,\r\n  Modifier,\r\n  convertToRaw,\r\n  convertFromRaw,\r\n} from 'draft-js';\r\nimport 'draft-js/dist/Draft.css';\r\n\r\nconst DraftEditor = () => {\r\n  // State management for the editor\r\n  const [editorState, setEditorState] = useState(() => {\r\n    const savedContent = localStorage.getItem('draftContent');\r\n    return savedContent\r\n      ? EditorState.createWithContent(convertFromRaw(JSON.parse(savedContent)))\r\n      : EditorState.createEmpty();\r\n  });\r\n\r\n  const editorRef = useRef(null);\r\n\r\n  // Focus the editor when its container is clicked\r\n  const focusEditor = () => {\r\n    editorRef.current && editorRef.current.focus();\r\n  };\r\n\r\n  // Save the editor content to localStorage\r\n  const handleSave = () => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(contentState);\r\n    localStorage.setItem('draftContent', JSON.stringify(rawContent));\r\n    alert('Content saved successfully!');\r\n  };\r\n\r\n  // Handle inline and block style toggling based on user input\r\n  const handleBeforeInput = (chars) => {\r\n    const currentContent = editorState.getCurrentContent();\r\n    const selection = editorState.getSelection();\r\n\r\n    if (selection.getStartOffset() === 0) {\r\n      const blockKey = selection.getStartKey();\r\n      const blockText = currentContent.getBlockForKey(blockKey).getText();\r\n\r\n      if (blockText.startsWith('#') && chars === ' ') {\r\n        setEditorState(toggleBlockStyle(editorState, selection, 'header-one', '#'));\r\n        return 'handled';\r\n      }\r\n\r\n      if (blockText.startsWith('*') && chars === ' ') {\r\n        setEditorState(toggleInlineStyle(editorState, selection, 'BOLD', '*'));\r\n        return 'handled';\r\n      }\r\n\r\n      if (blockText.startsWith('**') && chars === ' ') {\r\n        setEditorState(toggleInlineStyle(editorState, selection, 'RED', '**'));\r\n        return 'handled';\r\n      }\r\n\r\n      if (blockText.startsWith('***') && chars === ' ') {\r\n        setEditorState(toggleInlineStyle(editorState, selection, 'UNDERLINE', '***'));\r\n        return 'handled';\r\n      }\r\n    }\r\n\r\n    return 'not-handled';\r\n  };\r\n\r\n  const toggleBlockStyle = (editorState, selection, blockType, trigger) => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const newContentState = Modifier.replaceText(\r\n      contentState,\r\n      selection.merge({ focusOffset: trigger.length }),\r\n      ''\r\n    );\r\n\r\n    const updatedState = EditorState.push(editorState, newContentState, 'remove-range');\r\n    return RichUtils.toggleBlockType(updatedState, blockType);\r\n  };\r\n\r\n  const toggleInlineStyle = (editorState, selection, style, trigger) => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const newContentState = Modifier.replaceText(\r\n      contentState,\r\n      selection.merge({ focusOffset: trigger.length }),\r\n      ''\r\n    );\r\n\r\n    const updatedState = EditorState.push(editorState, newContentState, 'remove-range');\r\n    return RichUtils.toggleInlineStyle(updatedState, style);\r\n  };\r\n\r\n  // Custom style map for inline styles\r\n  const customStyleMap = {\r\n    RED: { color: 'red' },\r\n    UNDERLINE: { textDecoration: 'underline' },\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Title\"\r\n        style={styles.titleInput}\r\n      />\r\n      <div\r\n        style={styles.editorContainer}\r\n        onClick={focusEditor}\r\n      >\r\n        <Editor\r\n          ref={editorRef}\r\n          editorState={editorState}\r\n          onChange={setEditorState}\r\n          handleBeforeInput={handleBeforeInput}\r\n          customStyleMap={customStyleMap}\r\n          placeholder=\"Type here...\"\r\n        />\r\n      </div>\r\n      <button style={styles.saveButton} onClick={handleSave}>\r\n        Save\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Styles\r\nconst styles = {\r\n  container: {\r\n    padding: '20px',\r\n    fontFamily: 'Arial, sans-serif',\r\n    maxWidth: '800px',\r\n    margin: '0 auto',\r\n  },\r\n  titleInput: {\r\n    width: '100%',\r\n    fontSize: '1.5rem',\r\n    padding: '10px',\r\n    marginBottom: '20px',\r\n    border: '1px solid #ccc',\r\n    borderRadius: '5px',\r\n  },\r\n  editorContainer: {\r\n    border: '1px solid #ddd',\r\n    minHeight: '300px',\r\n    padding: '10px',\r\n    cursor: 'text',\r\n    borderRadius: '5px',\r\n  },\r\n  saveButton: {\r\n    marginTop: '20px',\r\n    padding: '10px 20px',\r\n    fontSize: '16px',\r\n    backgroundColor: '#007BFF',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n  },\r\n};\r\n\r\nexport default DraftEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}