{"ast":null,"code":"var _jsxFileName = \"E:\\\\Draft.js\\\\Editor\\\\src\\\\components\\\\DraftEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Editor, EditorState, RichUtils, Modifier, convertToRaw, convertFromRaw } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\n// Define custom inline styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customStyleMap = {\n  RED: {\n    color: 'red'\n  } // Define RED style\n};\nconst DraftEditor = () => {\n  _s();\n  const [editorState, setEditorState] = useState(() => {\n    const savedContent = localStorage.getItem('draftContent');\n    return savedContent ? EditorState.createWithContent(convertFromRaw(JSON.parse(savedContent))) : EditorState.createEmpty();\n  });\n  const [title, setT] = useState('');\n  const editorRef = useRef(null);\n  const focusEditor = () => {\n    editorRef.current && editorRef.current.focus();\n  };\n  const handleSave = () => {\n    const contentState = editorState.getCurrentContent();\n    const rawContent = convertToRaw(contentState);\n    localStorage.setItem('draftContent', JSON.stringify(rawContent));\n    alert('Content saved successfully!');\n  };\n\n  // Handle special input patterns (#, *, **, ***)\n  // const handleBeforeInput = (chars) => {\n  //   const contentState = editorState.getCurrentContent();\n  //   const selection = editorState.getSelection();\n  //   const blockKey = selection.getStartKey();\n  //   const blockText = contentState.getBlockForKey(blockKey).getText();\n\n  //   // Handle \"# \" → Heading\n  //   if (selection.getStartOffset() === 1 && blockText === '#' && chars === ' ') {\n  //     // Remove \"#\" and toggle block type\n  //     const newContentState = Modifier.replaceText(\n  //       contentState,\n  //       selection.merge({ focusOffset: 1 }),\n  //       '' // Remove \"#\"\n  //     );\n  //     const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n  //     setEditorState(RichUtils.toggleBlockType(updatedEditorState, 'header-one'));\n  //     return 'handled';\n  //   }\n\n  //   // Handle \"* \" → Bold\n  //   if (selection.getStartOffset() === 1 && blockText === '*' && chars === ' ') {\n  //     // Remove \"*\" and toggle inline style\n  //     const newContentState = Modifier.replaceText(\n  //       contentState,\n  //       selection.merge({ focusOffset: 1 }),\n  //       '' // Remove \"*\"\n  //     );\n  //     const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n  //     setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'BOLD'));\n  //     return 'handled';\n  //   }\n\n  //   // Handle \"** \" → Red line\n  //   if (selection.getStartOffset() === 2 && blockText === '**' && chars === ' ') {\n  //     // Remove \"**\" and toggle block type and style\n  //     const newContentState = Modifier.replaceText(\n  //       contentState,\n  //       selection.merge({ focusOffset: 2 }),\n  //       '' // Remove \"**\"\n  //     );\n  //     const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n  //     setEditorState(RichUtils.toggleBlockType(updatedEditorState, 'unstyled')); // Default block\n  //     setEditorState(\n  //       EditorState.setInlineStyleOverride(updatedEditorState, new Set(['RED']))\n  //     );\n  //     return 'handled';\n  //   }\n\n  //   // Handle \"*** \" → Underline\n  //   if (selection.getStartOffset() === 3 && blockText === '***' && chars === ' ') {\n  //     // Remove \"***\" and toggle inline style\n  //     const newContentState = Modifier.replaceText(\n  //       contentState,\n  //       selection.merge({ focusOffset: 3 }),\n  //       '' // Remove \"***\"\n  //     );\n  //     const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n  //     setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'UNDERLINE'));\n  //     return 'handled';\n  //   }\n\n  //   return 'not-handled';\n  // };\n\n  // Updated handleBeforeInput for processing special characters\n  const handleBeforeInput = chars => {\n    const contentState = editorState.getCurrentContent();\n    const selection = editorState.getSelection();\n    const blockKey = selection.getStartKey();\n    const blockText = contentState.getBlockForKey(blockKey).getText();\n    if (chars === ' ') {\n      // Handle \"# \" → Heading\n      if (blockText === '#') {\n        const newContentState = Modifier.replaceText(contentState, selection.merge({\n          anchorOffset: 0,\n          focusOffset: 1\n        }),\n        // Select \"#\"\n        '' // Remove \"#\"\n        );\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n        setEditorState(RichUtils.toggleBlockType(updatedEditorState, 'header-one'));\n        return 'handled';\n      }\n\n      // Handle \"* \" → Bold\n      if (blockText === '*') {\n        const newContentState = Modifier.replaceText(contentState, selection.merge({\n          anchorOffset: 0,\n          focusOffset: 1\n        }),\n        // Select \"*\"\n        '' // Remove \"*\"\n        );\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n        setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'BOLD'));\n        return 'handled';\n      }\n\n      // Handle \"** \" → Red line\n      if (blockText === '**') {\n        const newContentState = Modifier.replaceText(contentState, selection.merge({\n          anchorOffset: 0,\n          focusOffset: 2\n        }),\n        // Select \"**\"\n        '' // Remove \"**\"\n        );\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n        setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'RED')); // Use toggleInlineStyle\n        return 'handled';\n      }\n\n      // Handle \"*** \" → Underline\n      if (blockText === '***') {\n        const newContentState = Modifier.replaceText(contentState, selection.merge({\n          anchorOffset: 0,\n          focusOffset: 3\n        }),\n        // Select \"***\"\n        '' // Remove \"***\"\n        );\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n        setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'UNDERLINE'));\n        return 'handled';\n      }\n    }\n    return 'not-handled';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: setEditorState,\n      placeholder: \"Enter Title\",\n      style: styles.titleInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.editorContainer,\n      onClick: focusEditor,\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        ref: editorRef,\n        editorState: editorState,\n        onChange: setEditorState,\n        handleBeforeInput: handleBeforeInput,\n        placeholder: \"Type here...\",\n        customStyleMap: customStyleMap // Add custom styles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.saveButton,\n      onClick: handleSave,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n\n// Styles\n_s(DraftEditor, \"KMiVxJDzJigfrCPVjHyq07X9wwY=\");\n_c = DraftEditor;\nconst styles = {\n  container: {\n    padding: '20px',\n    fontFamily: 'Arial, sans-serif',\n    maxWidth: '800px',\n    margin: '0 auto'\n  },\n  titleInput: {\n    width: '100%',\n    fontSize: '1.5rem',\n    padding: '10px',\n    marginBottom: '20px',\n    border: '1px solid #ccc',\n    borderRadius: '5px'\n  },\n  editorContainer: {\n    border: '1px solid #ddd',\n    minHeight: '300px',\n    padding: '10px',\n    cursor: 'text',\n    borderRadius: '5px'\n  },\n  saveButton: {\n    marginTop: '20px',\n    padding: '10px 20px',\n    fontSize: '16px',\n    backgroundColor: '#007BFF',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  }\n};\nexport default DraftEditor;\nvar _c;\n$RefreshReg$(_c, \"DraftEditor\");","map":{"version":3,"names":["React","useState","useRef","Editor","EditorState","RichUtils","Modifier","convertToRaw","convertFromRaw","jsxDEV","_jsxDEV","customStyleMap","RED","color","DraftEditor","_s","editorState","setEditorState","savedContent","localStorage","getItem","createWithContent","JSON","parse","createEmpty","title","setT","editorRef","focusEditor","current","focus","handleSave","contentState","getCurrentContent","rawContent","setItem","stringify","alert","handleBeforeInput","chars","selection","getSelection","blockKey","getStartKey","blockText","getBlockForKey","getText","newContentState","replaceText","merge","anchorOffset","focusOffset","updatedEditorState","push","toggleBlockType","toggleInlineStyle","style","styles","container","children","type","onChange","placeholder","titleInput","fileName","_jsxFileName","lineNumber","columnNumber","editorContainer","onClick","ref","saveButton","_c","padding","fontFamily","maxWidth","margin","width","fontSize","marginBottom","border","borderRadius","minHeight","cursor","marginTop","backgroundColor","$RefreshReg$"],"sources":["E:/Draft.js/Editor/src/components/DraftEditor.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport {\r\n  Editor,\r\n  EditorState,\r\n  RichUtils,\r\n  Modifier,\r\n  convertToRaw,\r\n  convertFromRaw,\r\n} from 'draft-js';\r\nimport 'draft-js/dist/Draft.css';\r\n\r\n// Define custom inline styles\r\nconst customStyleMap = {\r\n  RED: { color: 'red' }, // Define RED style\r\n};\r\n\r\nconst DraftEditor = () => {\r\n  const [editorState, setEditorState] = useState(() => {\r\n    const savedContent = localStorage.getItem('draftContent');\r\n    return savedContent\r\n      ? EditorState.createWithContent(convertFromRaw(JSON.parse(savedContent)))\r\n      : EditorState.createEmpty();\r\n  });\r\n  const [title,setT]=useState('');\r\n\r\n  const editorRef = useRef(null);\r\n\r\n  const focusEditor = () => {\r\n    editorRef.current && editorRef.current.focus();\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(contentState);\r\n    localStorage.setItem('draftContent', JSON.stringify(rawContent));\r\n    alert('Content saved successfully!');\r\n  };\r\n\r\n  // Handle special input patterns (#, *, **, ***)\r\n// const handleBeforeInput = (chars) => {\r\n//   const contentState = editorState.getCurrentContent();\r\n//   const selection = editorState.getSelection();\r\n//   const blockKey = selection.getStartKey();\r\n//   const blockText = contentState.getBlockForKey(blockKey).getText();\r\n\r\n//   // Handle \"# \" → Heading\r\n//   if (selection.getStartOffset() === 1 && blockText === '#' && chars === ' ') {\r\n//     // Remove \"#\" and toggle block type\r\n//     const newContentState = Modifier.replaceText(\r\n//       contentState,\r\n//       selection.merge({ focusOffset: 1 }),\r\n//       '' // Remove \"#\"\r\n//     );\r\n//     const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n//     setEditorState(RichUtils.toggleBlockType(updatedEditorState, 'header-one'));\r\n//     return 'handled';\r\n//   }\r\n\r\n//   // Handle \"* \" → Bold\r\n//   if (selection.getStartOffset() === 1 && blockText === '*' && chars === ' ') {\r\n//     // Remove \"*\" and toggle inline style\r\n//     const newContentState = Modifier.replaceText(\r\n//       contentState,\r\n//       selection.merge({ focusOffset: 1 }),\r\n//       '' // Remove \"*\"\r\n//     );\r\n//     const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n//     setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'BOLD'));\r\n//     return 'handled';\r\n//   }\r\n\r\n//   // Handle \"** \" → Red line\r\n//   if (selection.getStartOffset() === 2 && blockText === '**' && chars === ' ') {\r\n//     // Remove \"**\" and toggle block type and style\r\n//     const newContentState = Modifier.replaceText(\r\n//       contentState,\r\n//       selection.merge({ focusOffset: 2 }),\r\n//       '' // Remove \"**\"\r\n//     );\r\n//     const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n//     setEditorState(RichUtils.toggleBlockType(updatedEditorState, 'unstyled')); // Default block\r\n//     setEditorState(\r\n//       EditorState.setInlineStyleOverride(updatedEditorState, new Set(['RED']))\r\n//     );\r\n//     return 'handled';\r\n//   }\r\n\r\n//   // Handle \"*** \" → Underline\r\n//   if (selection.getStartOffset() === 3 && blockText === '***' && chars === ' ') {\r\n//     // Remove \"***\" and toggle inline style\r\n//     const newContentState = Modifier.replaceText(\r\n//       contentState,\r\n//       selection.merge({ focusOffset: 3 }),\r\n//       '' // Remove \"***\"\r\n//     );\r\n//     const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n//     setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'UNDERLINE'));\r\n//     return 'handled';\r\n//   }\r\n\r\n//   return 'not-handled';\r\n// };\r\n\r\n// Updated handleBeforeInput for processing special characters\r\nconst handleBeforeInput = (chars) => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const selection = editorState.getSelection();\r\n    const blockKey = selection.getStartKey();\r\n    const blockText = contentState.getBlockForKey(blockKey).getText();\r\n  \r\n    if (chars === ' ') {\r\n      // Handle \"# \" → Heading\r\n      if (blockText === '#') {\r\n        const newContentState = Modifier.replaceText(\r\n          contentState,\r\n          selection.merge({ anchorOffset: 0, focusOffset: 1 }), // Select \"#\"\r\n          '' // Remove \"#\"\r\n        );\r\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n        setEditorState(RichUtils.toggleBlockType(updatedEditorState, 'header-one'));\r\n        return 'handled';\r\n      }\r\n  \r\n      // Handle \"* \" → Bold\r\n      if (blockText === '*') {\r\n        const newContentState = Modifier.replaceText(\r\n          contentState,\r\n          selection.merge({ anchorOffset: 0, focusOffset: 1 }), // Select \"*\"\r\n          '' // Remove \"*\"\r\n        );\r\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n        setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'BOLD'));\r\n        return 'handled';\r\n      }\r\n  \r\n      // Handle \"** \" → Red line\r\n      if (blockText === '**') {\r\n        const newContentState = Modifier.replaceText(\r\n          contentState,\r\n          selection.merge({ anchorOffset: 0, focusOffset: 2 }), // Select \"**\"\r\n          '' // Remove \"**\"\r\n        );\r\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n        setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'RED')); // Use toggleInlineStyle\r\n        return 'handled';\r\n      }\r\n      \r\n  \r\n      // Handle \"*** \" → Underline\r\n      if (blockText === '***') {\r\n        const newContentState = Modifier.replaceText(\r\n          contentState,\r\n          selection.merge({ anchorOffset: 0, focusOffset: 3 }), // Select \"***\"\r\n          '' // Remove \"***\"\r\n        );\r\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n        setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'UNDERLINE'));\r\n        return 'handled';\r\n      }\r\n    }\r\n  \r\n    return 'not-handled';\r\n  };\r\n  \r\n  return (\r\n    <div style={styles.container}>\r\n      <input\r\n        type=\"text\"\r\n        onChange={setEditorState}\r\n        placeholder=\"Enter Title\"\r\n        style={styles.titleInput}\r\n      />\r\n      <div\r\n        style={styles.editorContainer}\r\n        onClick={focusEditor}\r\n      >\r\n        <Editor\r\n          ref={editorRef}\r\n          editorState={editorState}\r\n          onChange={setEditorState}\r\n          handleBeforeInput={handleBeforeInput}\r\n          placeholder=\"Type here...\"\r\n          customStyleMap={customStyleMap} // Add custom styles\r\n        />\r\n      </div>\r\n      <button style={styles.saveButton} onClick={handleSave}>\r\n        Save\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Styles\r\nconst styles = {\r\n  container: {\r\n    padding: '20px',\r\n    fontFamily: 'Arial, sans-serif',\r\n    maxWidth: '800px',\r\n    margin: '0 auto',\r\n  },\r\n  titleInput: {\r\n    width: '100%',\r\n    fontSize: '1.5rem',\r\n    padding: '10px',\r\n    marginBottom: '20px',\r\n    border: '1px solid #ccc',\r\n    borderRadius: '5px',\r\n  },\r\n  editorContainer: {\r\n    border: '1px solid #ddd',\r\n    minHeight: '300px',\r\n    padding: '10px',\r\n    cursor: 'text',\r\n    borderRadius: '5px',\r\n  },\r\n  saveButton: {\r\n    marginTop: '20px',\r\n    padding: '10px 20px',\r\n    fontSize: '16px',\r\n    backgroundColor: '#007BFF',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n  },\r\n};\r\n\r\nexport default DraftEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}