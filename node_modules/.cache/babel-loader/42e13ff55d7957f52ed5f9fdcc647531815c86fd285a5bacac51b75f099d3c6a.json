{"ast":null,"code":"// Updated handleBeforeInput for processing special characters\nconst handleBeforeInput = chars => {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const blockKey = selection.getStartKey();\n  const blockText = contentState.getBlockForKey(blockKey).getText();\n  if (chars === ' ') {\n    // Handle \"# \" → Heading\n    if (blockText === '#') {\n      const newContentState = Modifier.replaceText(contentState, selection.merge({\n        anchorOffset: 0,\n        focusOffset: 1\n      }),\n      // Select \"#\"\n      '' // Remove \"#\"\n      );\n      const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n      setEditorState(RichUtils.toggleBlockType(updatedEditorState, 'header-one'));\n      return 'handled';\n    }\n\n    // Handle \"* \" → Bold\n    if (blockText === '*') {\n      const newContentState = Modifier.replaceText(contentState, selection.merge({\n        anchorOffset: 0,\n        focusOffset: 1\n      }),\n      // Select \"*\"\n      '' // Remove \"*\"\n      );\n      const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n      setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'BOLD'));\n      return 'handled';\n    }\n\n    // Handle \"** \" → Red line\n    if (blockText === '**') {\n      const newContentState = Modifier.replaceText(contentState, selection.merge({\n        anchorOffset: 0,\n        focusOffset: 2\n      }),\n      // Select \"**\"\n      '' // Remove \"**\"\n      );\n      const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n      setEditorState(EditorState.setInlineStyleOverride(RichUtils.toggleBlockType(updatedEditorState, 'unstyled'), new Set(['RED'])));\n      return 'handled';\n    }\n\n    // Handle \"*** \" → Underline\n    if (blockText === '***') {\n      const newContentState = Modifier.replaceText(contentState, selection.merge({\n        anchorOffset: 0,\n        focusOffset: 3\n      }),\n      // Select \"***\"\n      '' // Remove \"***\"\n      );\n      const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\n      setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'UNDERLINE'));\n      return 'handled';\n    }\n  }\n  return 'not-handled';\n};","map":{"version":3,"names":["handleBeforeInput","chars","contentState","editorState","getCurrentContent","selection","getSelection","blockKey","getStartKey","blockText","getBlockForKey","getText","newContentState","Modifier","replaceText","merge","anchorOffset","focusOffset","updatedEditorState","EditorState","push","setEditorState","RichUtils","toggleBlockType","toggleInlineStyle","setInlineStyleOverride","Set"],"sources":["E:/Draft.js/Editor/src/components/DraftEditor.js"],"sourcesContent":["// Updated handleBeforeInput for processing special characters\r\nconst handleBeforeInput = (chars) => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const selection = editorState.getSelection();\r\n    const blockKey = selection.getStartKey();\r\n    const blockText = contentState.getBlockForKey(blockKey).getText();\r\n  \r\n    if (chars === ' ') {\r\n      // Handle \"# \" → Heading\r\n      if (blockText === '#') {\r\n        const newContentState = Modifier.replaceText(\r\n          contentState,\r\n          selection.merge({ anchorOffset: 0, focusOffset: 1 }), // Select \"#\"\r\n          '' // Remove \"#\"\r\n        );\r\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n        setEditorState(RichUtils.toggleBlockType(updatedEditorState, 'header-one'));\r\n        return 'handled';\r\n      }\r\n  \r\n      // Handle \"* \" → Bold\r\n      if (blockText === '*') {\r\n        const newContentState = Modifier.replaceText(\r\n          contentState,\r\n          selection.merge({ anchorOffset: 0, focusOffset: 1 }), // Select \"*\"\r\n          '' // Remove \"*\"\r\n        );\r\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n        setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'BOLD'));\r\n        return 'handled';\r\n      }\r\n  \r\n      // Handle \"** \" → Red line\r\n      if (blockText === '**') {\r\n        const newContentState = Modifier.replaceText(\r\n          contentState,\r\n          selection.merge({ anchorOffset: 0, focusOffset: 2 }), // Select \"**\"\r\n          '' // Remove \"**\"\r\n        );\r\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n        setEditorState(\r\n          EditorState.setInlineStyleOverride(\r\n            RichUtils.toggleBlockType(updatedEditorState, 'unstyled'),\r\n            new Set(['RED'])\r\n          )\r\n        );\r\n        return 'handled';\r\n      }\r\n  \r\n      // Handle \"*** \" → Underline\r\n      if (blockText === '***') {\r\n        const newContentState = Modifier.replaceText(\r\n          contentState,\r\n          selection.merge({ anchorOffset: 0, focusOffset: 3 }), // Select \"***\"\r\n          '' // Remove \"***\"\r\n        );\r\n        const updatedEditorState = EditorState.push(editorState, newContentState, 'remove-range');\r\n        setEditorState(RichUtils.toggleInlineStyle(updatedEditorState, 'UNDERLINE'));\r\n        return 'handled';\r\n      }\r\n    }\r\n  \r\n    return 'not-handled';\r\n  };\r\n  "],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAIC,KAAK,IAAK;EACjC,MAAMC,YAAY,GAAGC,WAAW,CAACC,iBAAiB,CAAC,CAAC;EACpD,MAAMC,SAAS,GAAGF,WAAW,CAACG,YAAY,CAAC,CAAC;EAC5C,MAAMC,QAAQ,GAAGF,SAAS,CAACG,WAAW,CAAC,CAAC;EACxC,MAAMC,SAAS,GAAGP,YAAY,CAACQ,cAAc,CAACH,QAAQ,CAAC,CAACI,OAAO,CAAC,CAAC;EAEjE,IAAIV,KAAK,KAAK,GAAG,EAAE;IACjB;IACA,IAAIQ,SAAS,KAAK,GAAG,EAAE;MACrB,MAAMG,eAAe,GAAGC,QAAQ,CAACC,WAAW,CAC1CZ,YAAY,EACZG,SAAS,CAACU,KAAK,CAAC;QAAEC,YAAY,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAE,CAAC,CAAC;MAAE;MACtD,EAAE,CAAC;MACL,CAAC;MACD,MAAMC,kBAAkB,GAAGC,WAAW,CAACC,IAAI,CAACjB,WAAW,EAAES,eAAe,EAAE,cAAc,CAAC;MACzFS,cAAc,CAACC,SAAS,CAACC,eAAe,CAACL,kBAAkB,EAAE,YAAY,CAAC,CAAC;MAC3E,OAAO,SAAS;IAClB;;IAEA;IACA,IAAIT,SAAS,KAAK,GAAG,EAAE;MACrB,MAAMG,eAAe,GAAGC,QAAQ,CAACC,WAAW,CAC1CZ,YAAY,EACZG,SAAS,CAACU,KAAK,CAAC;QAAEC,YAAY,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAE,CAAC,CAAC;MAAE;MACtD,EAAE,CAAC;MACL,CAAC;MACD,MAAMC,kBAAkB,GAAGC,WAAW,CAACC,IAAI,CAACjB,WAAW,EAAES,eAAe,EAAE,cAAc,CAAC;MACzFS,cAAc,CAACC,SAAS,CAACE,iBAAiB,CAACN,kBAAkB,EAAE,MAAM,CAAC,CAAC;MACvE,OAAO,SAAS;IAClB;;IAEA;IACA,IAAIT,SAAS,KAAK,IAAI,EAAE;MACtB,MAAMG,eAAe,GAAGC,QAAQ,CAACC,WAAW,CAC1CZ,YAAY,EACZG,SAAS,CAACU,KAAK,CAAC;QAAEC,YAAY,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAE,CAAC,CAAC;MAAE;MACtD,EAAE,CAAC;MACL,CAAC;MACD,MAAMC,kBAAkB,GAAGC,WAAW,CAACC,IAAI,CAACjB,WAAW,EAAES,eAAe,EAAE,cAAc,CAAC;MACzFS,cAAc,CACZF,WAAW,CAACM,sBAAsB,CAChCH,SAAS,CAACC,eAAe,CAACL,kBAAkB,EAAE,UAAU,CAAC,EACzD,IAAIQ,GAAG,CAAC,CAAC,KAAK,CAAC,CACjB,CACF,CAAC;MACD,OAAO,SAAS;IAClB;;IAEA;IACA,IAAIjB,SAAS,KAAK,KAAK,EAAE;MACvB,MAAMG,eAAe,GAAGC,QAAQ,CAACC,WAAW,CAC1CZ,YAAY,EACZG,SAAS,CAACU,KAAK,CAAC;QAAEC,YAAY,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAE,CAAC,CAAC;MAAE;MACtD,EAAE,CAAC;MACL,CAAC;MACD,MAAMC,kBAAkB,GAAGC,WAAW,CAACC,IAAI,CAACjB,WAAW,EAAES,eAAe,EAAE,cAAc,CAAC;MACzFS,cAAc,CAACC,SAAS,CAACE,iBAAiB,CAACN,kBAAkB,EAAE,WAAW,CAAC,CAAC;MAC5E,OAAO,SAAS;IAClB;EACF;EAEA,OAAO,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}